using DataStructures

input = "GACCACACCACGAACAGCCGCTTGTTACGAGAAAGGGAACAGCGCCCCTGCACGGCTATTTTTGCTTTAGGATCACCGTGGTCCGCGTACATGAGAATTCAGCTGAAAATCCAAACCGGTCACGGTGAAAGCACGCACGAAGAATACGCGCCATACTCTTCGTGGTGAGCTCGTTAACTTGATTGTCCAGGGGCACCTATCACCAATTCATTTTGGTTCGTACCGTAAGAATCTTGAATCGGTACAGAGGTGGGGGCACGCGGTCCAAGGGTCCGAATCATTCTAATCTATGGTATGTACATTGGGAAGCGGGAGGAGATTTGCTTACTATCTCCTCGGACTGATCCTCGAGCGTGTGGTTAACGAAGGCGGCGAAAGATCTCTGAAGGCCCAGCTGTCCTTCGGGCCCTCGTTAAACTGCCTTGAACAGCTGGGTAAGTACTCCAAAGCCGACACAGCCTTGATGTGCATACGGGGTAATCTATAGGGATTTGGTGTAATGACCACCCATGCCAAAAGGCTCGATACGGCCAGCACTCGGTACCATACACGTTTCTCAATAGCGCGCACAAAGTGTATATAGTTCGCTTTGACGAGCTAAAAGACAGATACCCGGGCCGATTTTATGCAGGTTAAACGCAGGGCGGATGCGGGACTTTTTCGAGTTGCGGACAGGTTCCATCGCAGCCAGGACCCAACCCTAATAAAAATAACCCGGGGGGCCTATGAGCAATACCCACATTCCGCCAGTCGGTGTCGTTATGTGCGTGCAGCGCCTCTCAAGTCGTTTAGTTAGCCAATTTGTGTCTGCCTATTCGTCAACTGCCTCAATTCGCGA"

function base_count(dna::String)::SortedDict
    counts = SortedDict{Char,Integer}()
    for base in dna
        counts[base] = get(counts, base, 0) + 1
    end
    counts
end

function display_base_counts(base_count::SortedDict)::String
    join(values(base_count), ' ')
end


c = base_count(input)
out = display_base_counts(c)
print(out)
